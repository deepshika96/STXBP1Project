#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun  1 12:56:41 2020

@author: deepshika
-sorts excel data from SynD and graphs the data 
-additionally statistical tests can be added  
"""

#%%
import pandas as pd
import glob
import os
from openpyxl.utils.dataframe import dataframe_to_rows 
from openpyxl import Workbook
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
sns.set(style="ticks", color_codes=True)
from numpy import median
from scipy.stats import mannwhitneyu

dir= "path2directorywithexcelfiles"
os.chdir(dir)
retval = os.getcwd()
print(retval)
#%%
list=["Soma area (mean)","Mean X channel","Number of synapses", "Total dendritic length (micrometer)", "Mean X channel"] #list of parameters in the Basics section

for idx, parameter in enumerate(list):   #for each parameter
    wb = Workbook()
    ws = wb.active
    ws.title = parameter
    df_Group=pd.DataFrame() 
    df=pd.DataFrame()
    for excelFile in glob.glob("*.xls"):   #opens each group's SynD file
        head, tail = os.path.split(excelFile)
        filename = tail
        print(filename)
        a1,b1,c1,rr,kk=filename.split("-") #gets the coded names from the file name (split string), in our case, it's three coded names in each group  
        df1=pd.read_excel(excelFile,1) #in each excel sheet opens the basics sheet of each coded name (our case, 3)
        df2=pd.read_excel(excelFile,2)
        df3=pd.read_excel(excelFile,3)
        soma_1=df1[parameter] #extract specific parameter column
        soma_2=df2[parameter]
        soma_3=df3[parameter]
        soma=pd.concat([soma_1[:-4],soma_2[:-4],soma_3[:-4]], axis=1) #last four values are mean, SD, total N and sum that should be excluded, and all the exctraction is concated
        soma.columns=[a1,b1,c1] #column names added from file names 
        df=pd.concat([df,soma],axis=1) #add to dataframe that collects for each group 
    df_Group["group1"]=pd.concat([df['Ice'], df['Jury'], df['Kinky'],df["Letter"]],ignore_index=True) #create groups with each coded name 
   
    df_Group["group2"]=pd.concat([df['Index'], df['Jasmin'], df['Kiss'],df["Lake"]],ignore_index=True)
    
    df_Group["group3"]=pd.concat([df['Ivory'], df['Journey'], df['Karma'],df["Lock"]],ignore_index=True)
    df_Group = df_Group.apply(lambda x: pd.Series(x.dropna().values))
  
#%%
    for r in dataframe_to_rows(df_Group, index=False, header=True):
        ws.append(r)
    wb.save("path" + "Grouped_" + parameter + ".xlsx") #save for eaach parameter analyzed 
    #%%
    #plotting mentioned below, customize accordingly, first check for normality of groups before plotting, I chose box-whisker
    plt.close()
    flatui = ["#34495e", "#a29bfe", "#e74c3c", "#9b59b6"] #set colours 
    sns.palplot(sns.color_palette(flatui))
    sns.set_palette(flatui)
    
    g=sns.catplot(kind="box", color="w", data=df_Group, showfliers = False) #boxplot
   
    sns.stripplot(color="k",data=df_Group,ax=g.ax,size=4,jitter=0.07) #add data points 
    sns.set_style({'font.family': ['sans-serif']}, {"axes.edgecolor": "2"}) #set fonts 
    sns.set(font="Helvetica")
    

    #sns.violinplot( data=df_Group, palette="pastel" )
    g.savefig(parameter+ ".pdf", transparent=True) #save figure 
#%%
#some sheets have "/" in their name and do not get saved, change their sheet name while saving, everything is similar except for final saving step 
dir= "path2save"
os.chdir(dir)
retval = os.getcwd()
print(retval)
list=["Mean syn/morph", "Synapses/micrometer"]

for idx, parameter in enumerate(list):
    wb = Workbook()
    ws = wb.active
    
    df_Group=pd.DataFrame()
    df=pd.DataFrame()
    for excelFile in glob.glob("*.xls"):
        head, tail = os.path.split(excelFile)
        filename = tail
        print(filename)
        a1,b1,c1,rr,kk=filename.split("-")
        df1=pd.read_excel(excelFile,1)
        df2=pd.read_excel(excelFile,2)
        df3=pd.read_excel(excelFile,3)
        soma_1=df1[parameter]
        soma_2=df2[parameter]
        soma_3=df3[parameter]
        soma=pd.concat([soma_1[:-4],soma_2[:-4],soma_3[:-4]], axis=1)
        soma.columns=[a1,b1,c1]
        df=pd.concat([df,soma],axis=1)
    df_Group["WT"]=pd.concat([df['Ice'], df['Jury'], df['Kinky'],df["Letter"]],ignore_index=True)
   
    df_Group["STXBP1 HZ"]=pd.concat([df['Index'], df['Jasmin'], df['Kiss'],df["Lake"]],ignore_index=True)
    
    df_Group["STXBP1 KO"]=pd.concat([df['Ivory'], df['Journey'], df['Karma'],df["Lock"]],ignore_index=True)
    df_Group = df_Group.apply(lambda x: pd.Series(x.dropna().values))
    
    flatui = ["#34495e", "#3498db", "#e74c3c", "#9b59b6"]
    sns.palplot(sns.color_palette(flatui))
    sns.set_palette(flatui)
    g=sns.catplot(kind="bar", data=df_Group, capsize=0.2, errcolor= "darkgrey")
    sns.stripplot(color="k",data=df_Group,ax=g.ax,size=4,jitter=0.05)
    
    for r in dataframe_to_rows(df_Group, index=False, header=True):
        ws.append(r)
    if idx==0:
        for r in dataframe_to_rows(df, index=False, header=True):
            ws.append(r)
        wb.save("path" + "Grouped_Mean synmorph" + ".xlsx")
        g.savefig("G_Mean synmorph" + ".pdf", transparent=True)
    else:
        for r in dataframe_to_rows(df, index=False, header=True):
                ws.append(r)
        wb.save("path" + "Grouped_Synmicrometer" + ".xlsx")
        g.savefig("G_Synmicrometer"+ ".pdf", transparent=True)
#%%
        

parameter = "Sholl Analysis Dendrites"


dataf=pd.DataFrame()
df_Group =pd.DataFrame()
dfff_1=pd.DataFrame()
dfff_2=pd.DataFrame()
dfff_3=pd.DataFrame()
for excelFile in glob.glob("*.xls"):
    head, tail = os.path.split(excelFile)
    filename = tail
    a1,b1,c1,rr,kk=filename.split("-")
    df1=pd.read_excel(excelFile,13) #specify sheet numbers where the Sholl Analysis data is
    df2=pd.read_excel(excelFile,14)
    df3=pd.read_excel(excelFile,15)
    soma_1=df1.loc[:, 'To (mu)':'Mean'] #extract values of specific columns
    soma_2=df2.loc[:, 'To (mu)':'Mean']
    soma_3=df3.loc[:, 'To (mu)':'Mean']
    dataframes = [soma_1, soma_2, soma_3]
    for df in dataframes: 
        df.drop(df.columns[len(df.columns)-1], axis=1, inplace=True) #subtract mean columns 
    for df1 in [soma_2,soma_3]:
        df1.drop(['To (mu)'], axis=1, inplace=True) 
    
    soma=pd.concat([soma_1,soma_2,soma_3], axis=1) #create dataframe of group with all the coded names 
    
    dataf=pd.concat([dataf,soma],axis=1) #create 

sv1=["Ice", "ice", "jury", "kinky", "letter"] #create list with all groups in one 
sv2= [ "index", "jasmin","kiss","lake"]
sv3=["ivory", "journey","karma", "lock"]
dfff_1=dataf.loc[:, dataf.columns.str.contains("|".join(sv1))] #create groups of dataframes with each list 
dfff_2=dataf.loc[:, dataf.columns.str.contains("|".join(sv2))]
dfff_3=dataf.loc[:, dataf.columns.str.contains("|".join(sv3))]


for ff in [dfff_1,dfff_2,dfff_3]: #add index for each dataframe  as distance from soma 
    mark=0
    for index, row in ff.iterrows():
         ff.loc[index, "Index"] = mark
         mark=mark+5
    ff=ff[ ["Index"] + [col for col in ff.columns if col!="Index"] ]     
    ff["id"]=df.index
    ff_k=pd.melt(ff,id_vars='Index',value_name='id', var_name='cellname') #reshape data to make compatible with sns plotting 
    sns.lineplot(x=ff_k["Index"],y=ff_k["id"], data=ff_k,sort=True)
    plt.xlim(0,300)


dfff_1.to_excel("path" + "Grouped_" + parameter + ".xlsx") #save2excel 
dfff_2.to_excel("path" + "Grouped_" + parameter + ".xlsx")
dfff_3.to_excel("path" + "Grouped_" + parameter + ".xlsx")

        
