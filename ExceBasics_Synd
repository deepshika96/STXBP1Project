#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun  1 12:56:41 2020

@author: deepshika
"""

#%%
import pandas as pd
import glob
import os
from openpyxl.utils.dataframe import dataframe_to_rows 
from openpyxl import Workbook
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
sns.set(style="ticks", color_codes=True)
from numpy import median
from scipy.stats import mannwhitneyu

dir= "/Users/deepshika/Documents/MATLAB/Synapse staining/Excel Data Analysis_SynD/"
os.chdir(dir)
retval = os.getcwd()
print(retval)
#%%
list=["Soma area (mean)","Mean X channel","Number of synapses", "Total dendritic length (micrometer)", "Mean X channel"]

for idx, parameter in enumerate(list):
    wb = Workbook()
    ws = wb.active
    ws.title = parameter
    df_Group=pd.DataFrame()
    df=pd.DataFrame()
    for excelFile in glob.glob("*.xls"):
        head, tail = os.path.split(excelFile)
        filename = tail
        print(filename)
        a1,b1,c1,rr,kk=filename.split("-")
        df1=pd.read_excel(excelFile,1)
        df2=pd.read_excel(excelFile,2)
        df3=pd.read_excel(excelFile,3)
        soma_1=df1[parameter]
        soma_2=df2[parameter]
        soma_3=df3[parameter]
        soma=pd.concat([soma_1[:-4],soma_2[:-4],soma_3[:-4]], axis=1)
        soma.columns=[a1,b1,c1]
        df=pd.concat([df,soma],axis=1)
    df_Group["WT"]=pd.concat([df['Ice'], df['Jury'], df['Kinky'],df["Letter"]],ignore_index=True)
   
    df_Group["STXBP1 HZ"]=pd.concat([df['Index'], df['Jasmin'], df['Kiss'],df["Lake"]],ignore_index=True)
    
    df_Group["STXBP1 KO"]=pd.concat([df['Ivory'], df['Journey'], df['Karma'],df["Lock"]],ignore_index=True)
    df_Group = df_Group.apply(lambda x: pd.Series(x.dropna().values))
  
#%%
    for r in dataframe_to_rows(df_Group, index=False, header=True):
        ws.append(r)
    wb.save("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_" + parameter + ".xlsx")
    #%%
    plt.close()
    flatui = ["#34495e", "#a29bfe", "#e74c3c", "#9b59b6"]
    sns.palplot(sns.color_palette(flatui))
    sns.set_palette(flatui)
    
    g=sns.catplot(kind="box", color="w", data=df_Group, showfliers = False)
   
    sns.stripplot(color="k",data=df_Group,ax=g.ax,size=4,jitter=0.07)
    sns.set_style({'font.family': ['sans-serif']}, {"axes.edgecolor": "2"})
    sns.set(font="Helvetica")
    

    #sns.violinplot( data=df_Group, palette="pastel" )
    #g.savefig(parameter+ ".pdf", transparent=True)
#%%
dir= "/Users/deepshika/Documents/MATLAB/Synapse staining/Excel Data Analysis_SynD/"
os.chdir(dir)
retval = os.getcwd()
print(retval)
list=["Mean syn/morph", "Synapses/micrometer"]

for idx, parameter in enumerate(list):
    wb = Workbook()
    ws = wb.active
    
    df_Group=pd.DataFrame()
    df=pd.DataFrame()
    for excelFile in glob.glob("*.xls"):
        head, tail = os.path.split(excelFile)
        filename = tail
        print(filename)
        a1,b1,c1,rr,kk=filename.split("-")
        df1=pd.read_excel(excelFile,1)
        df2=pd.read_excel(excelFile,2)
        df3=pd.read_excel(excelFile,3)
        soma_1=df1[parameter]
        soma_2=df2[parameter]
        soma_3=df3[parameter]
        soma=pd.concat([soma_1[:-4],soma_2[:-4],soma_3[:-4]], axis=1)
        soma.columns=[a1,b1,c1]
        df=pd.concat([df,soma],axis=1)
    df_Group["WT"]=pd.concat([df['Ice'], df['Jury'], df['Kinky'],df["Letter"]],ignore_index=True)
   
    df_Group["STXBP1 HZ"]=pd.concat([df['Index'], df['Jasmin'], df['Kiss'],df["Lake"]],ignore_index=True)
    
    df_Group["STXBP1 KO"]=pd.concat([df['Ivory'], df['Journey'], df['Karma'],df["Lock"]],ignore_index=True)
    df_Group = df_Group.apply(lambda x: pd.Series(x.dropna().values))
    
    flatui = ["#34495e", "#3498db", "#e74c3c", "#9b59b6"]
    sns.palplot(sns.color_palette(flatui))
    sns.set_palette(flatui)
    g=sns.catplot(kind="bar", data=df_Group, capsize=0.2, errcolor= "darkgrey")
    sns.stripplot(color="k",data=df_Group,ax=g.ax,size=4,jitter=0.05)
    
    for r in dataframe_to_rows(df_Group, index=False, header=True):
        ws.append(r)
    if idx==0:
        for r in dataframe_to_rows(df, index=False, header=True):
            ws.append(r)
        wb.save("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets1/" + "Grouped_Mean synmorph" + ".xlsx")
        g.savefig("G_Mean synmorph" + ".pdf", transparent=True)
    else:
        for r in dataframe_to_rows(df, index=False, header=True):
                ws.append(r)
        wb.save("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets1/" + "Grouped_Synmicrometer" + ".xlsx")
        g.savefig("G_Synmicrometer"+ ".pdf", transparent=True)
#%%
        

parameter = "Sholl Analysis Dendrites"
#list=["To (mu)", "Total dendritic length (micrometer)", "Synapses/micrometer", "Mean X channel"]


dataf=pd.DataFrame()
df_Group =pd.DataFrame()
dfff_1=pd.DataFrame()
dfff_2=pd.DataFrame()
dfff_3=pd.DataFrame()
for excelFile in glob.glob("*.xls"):
    head, tail = os.path.split(excelFile)
    filename = tail
    a1,b1,c1,rr,kk=filename.split("-")
    df1=pd.read_excel(excelFile,13)
    df2=pd.read_excel(excelFile,14)
    df3=pd.read_excel(excelFile,15)
    soma_1=df1.loc[:, 'To (mu)':'Mean']
    soma_2=df2.loc[:, 'To (mu)':'Mean']
    soma_3=df3.loc[:, 'To (mu)':'Mean']
    dataframes = [soma_1, soma_2, soma_3]
    for df in dataframes: 
        df.drop(df.columns[len(df.columns)-1], axis=1, inplace=True)
    for df1 in [soma_2,soma_3]:
        df1.drop(['To (mu)'], axis=1, inplace=True)
    
    soma=pd.concat([soma_1,soma_2,soma_3], axis=1)
    
    dataf=pd.concat([dataf,soma],axis=1)
#Group_1 = dataf.filter(regex='spike')
#print(dataf.describe())
#dfff["hello"]=dataf.filter(regex='Ice')
#dfff["cool"]=dataf.filter(like='ice').columns
sv1=["Ice", "ice", "jury", "kinky", "letter"]
sv2= [ "index", "jasmin","kiss","lake"]
sv3=["ivory", "journey","karma", "lock"]
dfff_1=dataf.loc[:, dataf.columns.str.contains("|".join(sv1))]
dfff_2=dataf.loc[:, dataf.columns.str.contains("|".join(sv2))]
dfff_3=dataf.loc[:, dataf.columns.str.contains("|".join(sv3))]

#%%
for ff in [dfff_1,dfff_2,dfff_3]:
    mark=0
    for index, row in ff.iterrows():
         ff.loc[index, "Index"] = mark
         mark=mark+5
    ff=ff[ ["Index"] + [col for col in ff.columns if col!="Index"] ]     
    ff["id"]=df.index
    ff_k=pd.melt(ff,id_vars='Index',value_name='id', var_name='cellname')
    sns.lineplot(x=ff_k["Index"],y=ff_k["id"], data=ff_k,sort=True)
    plt.xlim(0,300)

#%%
sns.lineplot(x=dfff_k["Index"].dropna(),y=dfff_k["id"].dropna(), data=dfff_k,sort=True)
plt.xlim(0,300)

plt.show()
#%%
dfff_k.to_excel( "kktraildell"  + ".xlsx")
#%%
dfff_1.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_WT" + parameter + ".xlsx")
dfff_2.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_HZ" + parameter + ".xlsx")
dfff_3.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_KO" + parameter + ".xlsx")
#%%
#%%
        

parameter = "Sholl Analysis Synapses"
#list=["To (mu)", "Total dendritic length (micrometer)", "Synapses/micrometer", "Mean X channel"]


dataf=pd.DataFrame()
df_Group =pd.DataFrame()
dfff_1=pd.DataFrame()
dfff_2=pd.DataFrame()
dfff_3=pd.DataFrame()
for excelFile in glob.glob("*.xls"):
    head, tail = os.path.split(excelFile)
    filename = tail
    a1,b1,c1,rr,kk=filename.split("-")
    df1=pd.read_excel(excelFile,16)
    df2=pd.read_excel(excelFile,17)
    df3=pd.read_excel(excelFile,18)
    soma_1=df1.loc[:, 'To (mu)':'Mean']
    soma_2=df2.loc[:, 'To (mu)':'Mean']
    soma_3=df3.loc[:, 'To (mu)':'Mean']
    dataframes = [soma_1, soma_2, soma_3]
    for df in dataframes: 
        df.drop(df.columns[len(df.columns)-1], axis=1, inplace=True)
    for df1 in [soma_2,soma_3]:
        df1.drop(['To (mu)'], axis=1, inplace=True)
    
    soma=pd.concat([soma_1,soma_2,soma_3], axis=1)
    
    dataf=pd.concat([dataf,soma],axis=1)
#Group_1 = dataf.filter(regex='spike')
#print(dataf.describe())
#dfff["hello"]=dataf.filter(regex='Ice')
#dfff["cool"]=dataf.filter(like='ice').columns
sv1=["Ice", "ice", "jury", "kinky", "letter"]
sv2= [ "index", "jasmin","kiss","lake"]
sv3=["ivory", "journey","karma", "lock"]
dfff_1=dataf.loc[:, dataf.columns.str.contains("|".join(sv1))]
dfff_2=dataf.loc[:, dataf.columns.str.contains("|".join(sv2))]
dfff_3=dataf.loc[:, dataf.columns.str.contains("|".join(sv3))]
print(dfff_1)

dfff_1.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_WT" + parameter + ".xlsx")
dfff_2.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_HZ" + parameter + ".xlsx")
dfff_3.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_KO" + parameter + ".xlsx")
#%%
#%%
        

parameter = "Sholl r(S,M)"
#list=["To (mu)", "Total dendritic length (micrometer)", "Synapses/micrometer", "Mean X channel"]


dataf=pd.DataFrame()
df_Group =pd.DataFrame()
dfff_1=pd.DataFrame()
dfff_2=pd.DataFrame()
dfff_3=pd.DataFrame()
for excelFile in glob.glob("*.xls"):
    head, tail = os.path.split(excelFile)
    filename = tail
    a1,b1,c1,rr,kk=filename.split("-")
    df1=pd.read_excel(excelFile,28)
    df2=pd.read_excel(excelFile,29)
    df3=pd.read_excel(excelFile,30)
    soma_1=df1.loc[:, 'To (mu)':'Mean']
    soma_2=df2.loc[:, 'To (mu)':'Mean']
    soma_3=df3.loc[:, 'To (mu)':'Mean']
    dataframes = [soma_1, soma_2, soma_3]
    for df in dataframes: 
        df.drop(df.columns[len(df.columns)-1], axis=1, inplace=True)
    for df1 in [soma_2,soma_3]:
        df1.drop(['To (mu)'], axis=1, inplace=True)
    
    soma=pd.concat([soma_1,soma_2,soma_3], axis=1)
    
    dataf=pd.concat([dataf,soma],axis=1)
#Group_1 = dataf.filter(regex='spike')
#print(dataf.describe())
#dfff["hello"]=dataf.filter(regex='Ice')
#dfff["cool"]=dataf.filter(like='ice').columns
sv1=["Ice", "ice", "jury", "kinky", "letter"]
sv2= [ "index", "jasmin","kiss","lake"]
sv3=["ivory", "journey","karma", "lock"]
dfff_1=dataf.loc[:, dataf.columns.str.contains("|".join(sv1))]
dfff_2=dataf.loc[:, dataf.columns.str.contains("|".join(sv2))]
dfff_3=dataf.loc[:, dataf.columns.str.contains("|".join(sv3))]
print(dfff_2)

dfff_1.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_WT_" + parameter + ".xlsx")
dfff_2.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_HZ_" + parameter + ".xlsx")
dfff_3.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_KO_" + parameter + ".xlsx")
#%%
parameter = "Sholl r(X,M)"
#list=["To (mu)", "Total dendritic length (micrometer)", "Synapses/micrometer", "Mean X channel"]


dataf=pd.DataFrame()
df_Group =pd.DataFrame()
dfff_1=pd.DataFrame()
dfff_2=pd.DataFrame()
dfff_3=pd.DataFrame()
for excelFile in glob.glob("*.xls"):
    head, tail = os.path.split(excelFile)
    filename = tail
    a1,b1,c1,rr,kk=filename.split("-")
    df1=pd.read_excel(excelFile,31)
    df2=pd.read_excel(excelFile,32)
    df3=pd.read_excel(excelFile,33)
    soma_1=df1.loc[:, 'To (mu)':'Mean']
    soma_2=df2.loc[:, 'To (mu)':'Mean']
    soma_3=df3.loc[:, 'To (mu)':'Mean']
    dataframes = [soma_1, soma_2, soma_3]
    for df in dataframes: 
        df.drop(df.columns[len(df.columns)-1], axis=1, inplace=True)
    for df1 in [soma_2,soma_3]:
        df1.drop(['To (mu)'], axis=1, inplace=True)
    
    soma=pd.concat([soma_1,soma_2,soma_3], axis=1)
    
    dataf=pd.concat([dataf,soma],axis=1)
#Group_1 = dataf.filter(regex='spike')
#print(dataf.describe())
#dfff["hello"]=dataf.filter(regex='Ice')
#dfff["cool"]=dataf.filter(like='ice').columns
sv1=["Ice", "ice", "jury", "kinky", "letter"]
sv2= [ "index", "jasmin","kiss","lake"]
sv3=["ivory", "journey","karma", "lock"]
dfff_1=dataf.loc[:, dataf.columns.str.contains("|".join(sv1))]
dfff_2=dataf.loc[:, dataf.columns.str.contains("|".join(sv2))]
dfff_3=dataf.loc[:, dataf.columns.str.contains("|".join(sv3))]
#%%
#%%
df.drop(df.columns[len(df.columns)-1], axis=1, inplace=True)
print(dfff_1[dfff_1.columns[-3:]])
#%%
mark=0
for index, row in dfff_1.iterrows():
     dfff_1.loc[index, "Index"] = mark
     mark=mark+5
dfff_1=dfff_1[ ["Index"] + [col for col in dfff_1.columns if col!="Index"] ]     
dfff_1["id"]=df.index
dfff_k=pd.melt(dfff_1,id_vars='Index',value_name='id', var_name='cellname')
dfff_k.to_excel( "ktraildell"  + ".xlsx")
#%%

#%%
dfff_k=dfff_1.unstack()
#%%
print(dfff_k.head())
#%%
dfff_k = pd.wide_to_long(dfff_1, ['MAX_'], i=dfff_1.index,
              j='CellName')
#%%
print(dfff_k[dfff_k.columns[-3:]])
#%%


#%%
from scipy import mean 
print(dfff_1.head())
T_dfff_1=dfff_1.T
#%%
sns.lineplot(x=dfff_k["Index"].dropna(),y=dfff_k["id"].dropna(), data=dfff_k,sort=True)
plt.xlim(0,300)

plt.show()
#%%
dfff_1.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_WT_" + parameter + ".xlsx")
dfff_2.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_HZ_" + parameter + ".xlsx")
dfff_3.to_excel("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_KO_" + parameter + ".xlsx")
#%%
for z in dataframe_to_rows(dfff_1, index=False, header=True):
        ws.append(z)
wb.save("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_WT" + parameter + ".xlsx")
#%%
for a in dataframe_to_rows(dfff_2, index=False, header=True):
        ws.append(a)
wb.save("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_HZ" + parameter + ".xlsx")
for t in dataframe_to_rows(dfff_3, index=False, header=True):
        ws.append(t)
wb.save("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + "Grouped_KO" + parameter + ".xlsx")
        
        #%%
from scipy import stats
for x,idx in enumerate(df_Group.columns.values):
    y= df.iloc[:,x]

    k2, p = stats.normaltest(y,size = 40)
    alpha = 1e-3
    print("p = {:g}".format(p))

    if p < alpha:  # null hypothesis: x comes from a normal distribution
        print("The null hypothesis can be rejected")
    else:
        print("The null hypothesis cannot be rejected")
#%%
stat, p = mannwhitneyu(df_Group["WT"],df_Group["STZBP1 KO"])

print('Statistics=%.3f, p=%.3f' % (stat, p))
# interpret
alpha = 0.05
if p > alpha:
	print('Same distribution (fail to reject H0)')
else:
	print('Different distribution (reject H0)')

#df_Group.boxplot()
#%%
for r in dataframe_to_rows(df, index=False, header=True):
    ws.append(r)
         
wb.save("/Users/deepshika/Documents/MATLAB/Synapse staining/Sheets/" + parameter + ".xlsx")